<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--这块等于dao接口的实现  namespace必须和接口的类路径一样-->
<mapper namespace="oops.dao.UserMapper">
    <!-- findById必须和接口中的方法名一样  返回一个User  就是刚才的别名  如果不弄别名要连类路径一起写 麻烦-->
    <resultMap id="userResult" type="oops.bean.User">
        <result property="username" column="user_name"/>
        <result property="id" column="user_id"/>
        <result property="email" column="user_email"/>
        <result property="password" column="user_password"/>
        
        <collection property="blogs" ofType="oops.bean.Blog">
            <id property="id" column="blog_id"/>
            <result property="ownerId" column="user_id"/>
            <result property="title" column="blog_title"/>
            <result property="content" column="blog_content"/>
        </collection>
    </resultMap>
    
    <select id="findById" parameterType="Integer" resultType="oops.bean.User" resultMap="userResult">
        SELECT
        user.id AS user_id,
        user.name AS user_name,
        user.email AS user_email,
        user.password AS user_password,
        blog.id AS blog_id,
        blog.title AS blog_title,
        blog.content AS blog_content
        FROM user, blog WHERE user.id = #{id} and user.id=blog.owner_id;
    </select>

    <select id="findByPassword" parameterType="String" resultType="oops.bean.User" resultMap="userResult">
        SELECT *
        FROM blog_db.user
        WHERE password = #{password}
    </select>

    <select id="findByNameAndPassword" parameterType="HashMap" resultType="oops.bean.User" resultMap="userResult">
        SELECT id, name, email
        FROM blog_db.user
        WHERE name = #{name}
        AND password = #{password}
    </select>

    <insert id="insertUser1" parameterType="oops.bean.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `blog_db`.`user` ( `name`, `email`, `password`)
        VALUES (#{username}, #{email}, #{password})
    </insert>

    <parameterMap id="insertUser2ParamsMap" type="oops.bean.User">
        <parameter property="username"/>
        <parameter property="email"/>
        <parameter property="password"/>
    </parameterMap>

    <insert id="insertUser2" parameterType="oops.bean.User" parameterMap="insertUser2ParamsMap" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `blog_db`.`user` ( `name`, `email`, `password`)
         VALUES (?, ?, ?)
    </insert>

    <update id="updateUserPassword" parameterType="oops.bean.User">
        UPDATE blog_db.user
        SET password = #{password}
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="oops.bean.User">
        DELETE FROM blog_db.user
        WHERE id = #{id}
    </delete>

    <delete id="deleteByGreaterThanId" parameterType="Integer">
        <![CDATA[
        DELETE FROM blog_db.user
        WHERE id > #{id}
        ]]>

    </delete>
</mapper>